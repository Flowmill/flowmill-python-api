# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DashboardComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'metric': 'str',
        'focus_zoom': 'str',
        'peer_zoom': 'str',
        'src_filters': 'list[ComponentComponentTrafficFilter]',
        'dst_filters': 'list[ComponentComponentTrafficFilter]',
        'source_filters': 'list[GrpcFilter]',
        'destination_filters': 'list[GrpcFilter]',
        'include_table': 'bool',
        'section_type': 'str',
        'id': 'str',
        'locality': 'GrpcLocality',
        'directionality': 'GrpcDirectionality',
        'top_n': 'int',
        'top_n_sort': 'str',
        'table_columns': 'list[str]',
        'top_k': 'int',
        'label_equality': 'list[GrpcLabelEqualityPair]',
        'equal_labels': 'list[str]',
        'unequal_labels': 'list[str]',
        'source_grouping': 'list[str]',
        'destination_grouping': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'metric': 'metric',
        'focus_zoom': 'focusZoom',
        'peer_zoom': 'peerZoom',
        'src_filters': 'srcFilters',
        'dst_filters': 'dstFilters',
        'source_filters': 'sourceFilters',
        'destination_filters': 'destinationFilters',
        'include_table': 'includeTable',
        'section_type': 'sectionType',
        'id': 'id',
        'locality': 'locality',
        'directionality': 'directionality',
        'top_n': 'topN',
        'top_n_sort': 'topNSort',
        'table_columns': 'tableColumns',
        'top_k': 'topK',
        'label_equality': 'labelEquality',
        'equal_labels': 'equalLabels',
        'unequal_labels': 'unequalLabels',
        'source_grouping': 'sourceGrouping',
        'destination_grouping': 'destinationGrouping'
    }

    def __init__(self, name=None, metric=None, focus_zoom=None, peer_zoom=None, src_filters=None, dst_filters=None, source_filters=None, destination_filters=None, include_table=None, section_type=None, id=None, locality=None, directionality=None, top_n=None, top_n_sort=None, table_columns=None, top_k=None, label_equality=None, equal_labels=None, unequal_labels=None, source_grouping=None, destination_grouping=None):  # noqa: E501
        """DashboardComponent - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._metric = None
        self._focus_zoom = None
        self._peer_zoom = None
        self._src_filters = None
        self._dst_filters = None
        self._source_filters = None
        self._destination_filters = None
        self._include_table = None
        self._section_type = None
        self._id = None
        self._locality = None
        self._directionality = None
        self._top_n = None
        self._top_n_sort = None
        self._table_columns = None
        self._top_k = None
        self._label_equality = None
        self._equal_labels = None
        self._unequal_labels = None
        self._source_grouping = None
        self._destination_grouping = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if metric is not None:
            self.metric = metric
        if focus_zoom is not None:
            self.focus_zoom = focus_zoom
        if peer_zoom is not None:
            self.peer_zoom = peer_zoom
        if src_filters is not None:
            self.src_filters = src_filters
        if dst_filters is not None:
            self.dst_filters = dst_filters
        if source_filters is not None:
            self.source_filters = source_filters
        if destination_filters is not None:
            self.destination_filters = destination_filters
        if include_table is not None:
            self.include_table = include_table
        if section_type is not None:
            self.section_type = section_type
        if id is not None:
            self.id = id
        if locality is not None:
            self.locality = locality
        if directionality is not None:
            self.directionality = directionality
        if top_n is not None:
            self.top_n = top_n
        if top_n_sort is not None:
            self.top_n_sort = top_n_sort
        if table_columns is not None:
            self.table_columns = table_columns
        if top_k is not None:
            self.top_k = top_k
        if label_equality is not None:
            self.label_equality = label_equality
        if equal_labels is not None:
            self.equal_labels = equal_labels
        if unequal_labels is not None:
            self.unequal_labels = unequal_labels
        if source_grouping is not None:
            self.source_grouping = source_grouping
        if destination_grouping is not None:
            self.destination_grouping = destination_grouping

    @property
    def name(self):
        """Gets the name of this DashboardComponent.  # noqa: E501


        :return: The name of this DashboardComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardComponent.


        :param name: The name of this DashboardComponent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def metric(self):
        """Gets the metric of this DashboardComponent.  # noqa: E501


        :return: The metric of this DashboardComponent.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this DashboardComponent.


        :param metric: The metric of this DashboardComponent.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def focus_zoom(self):
        """Gets the focus_zoom of this DashboardComponent.  # noqa: E501


        :return: The focus_zoom of this DashboardComponent.  # noqa: E501
        :rtype: str
        """
        return self._focus_zoom

    @focus_zoom.setter
    def focus_zoom(self, focus_zoom):
        """Sets the focus_zoom of this DashboardComponent.


        :param focus_zoom: The focus_zoom of this DashboardComponent.  # noqa: E501
        :type: str
        """

        self._focus_zoom = focus_zoom

    @property
    def peer_zoom(self):
        """Gets the peer_zoom of this DashboardComponent.  # noqa: E501


        :return: The peer_zoom of this DashboardComponent.  # noqa: E501
        :rtype: str
        """
        return self._peer_zoom

    @peer_zoom.setter
    def peer_zoom(self, peer_zoom):
        """Sets the peer_zoom of this DashboardComponent.


        :param peer_zoom: The peer_zoom of this DashboardComponent.  # noqa: E501
        :type: str
        """

        self._peer_zoom = peer_zoom

    @property
    def src_filters(self):
        """Gets the src_filters of this DashboardComponent.  # noqa: E501


        :return: The src_filters of this DashboardComponent.  # noqa: E501
        :rtype: list[ComponentComponentTrafficFilter]
        """
        return self._src_filters

    @src_filters.setter
    def src_filters(self, src_filters):
        """Sets the src_filters of this DashboardComponent.


        :param src_filters: The src_filters of this DashboardComponent.  # noqa: E501
        :type: list[ComponentComponentTrafficFilter]
        """

        self._src_filters = src_filters

    @property
    def dst_filters(self):
        """Gets the dst_filters of this DashboardComponent.  # noqa: E501


        :return: The dst_filters of this DashboardComponent.  # noqa: E501
        :rtype: list[ComponentComponentTrafficFilter]
        """
        return self._dst_filters

    @dst_filters.setter
    def dst_filters(self, dst_filters):
        """Sets the dst_filters of this DashboardComponent.


        :param dst_filters: The dst_filters of this DashboardComponent.  # noqa: E501
        :type: list[ComponentComponentTrafficFilter]
        """

        self._dst_filters = dst_filters

    @property
    def source_filters(self):
        """Gets the source_filters of this DashboardComponent.  # noqa: E501


        :return: The source_filters of this DashboardComponent.  # noqa: E501
        :rtype: list[GrpcFilter]
        """
        return self._source_filters

    @source_filters.setter
    def source_filters(self, source_filters):
        """Sets the source_filters of this DashboardComponent.


        :param source_filters: The source_filters of this DashboardComponent.  # noqa: E501
        :type: list[GrpcFilter]
        """

        self._source_filters = source_filters

    @property
    def destination_filters(self):
        """Gets the destination_filters of this DashboardComponent.  # noqa: E501


        :return: The destination_filters of this DashboardComponent.  # noqa: E501
        :rtype: list[GrpcFilter]
        """
        return self._destination_filters

    @destination_filters.setter
    def destination_filters(self, destination_filters):
        """Sets the destination_filters of this DashboardComponent.


        :param destination_filters: The destination_filters of this DashboardComponent.  # noqa: E501
        :type: list[GrpcFilter]
        """

        self._destination_filters = destination_filters

    @property
    def include_table(self):
        """Gets the include_table of this DashboardComponent.  # noqa: E501


        :return: The include_table of this DashboardComponent.  # noqa: E501
        :rtype: bool
        """
        return self._include_table

    @include_table.setter
    def include_table(self, include_table):
        """Sets the include_table of this DashboardComponent.


        :param include_table: The include_table of this DashboardComponent.  # noqa: E501
        :type: bool
        """

        self._include_table = include_table

    @property
    def section_type(self):
        """Gets the section_type of this DashboardComponent.  # noqa: E501


        :return: The section_type of this DashboardComponent.  # noqa: E501
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this DashboardComponent.


        :param section_type: The section_type of this DashboardComponent.  # noqa: E501
        :type: str
        """

        self._section_type = section_type

    @property
    def id(self):
        """Gets the id of this DashboardComponent.  # noqa: E501

        The Id of this component/section. This field is generated and handled by frontend, NOT backend.  # noqa: E501

        :return: The id of this DashboardComponent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardComponent.

        The Id of this component/section. This field is generated and handled by frontend, NOT backend.  # noqa: E501

        :param id: The id of this DashboardComponent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def locality(self):
        """Gets the locality of this DashboardComponent.  # noqa: E501


        :return: The locality of this DashboardComponent.  # noqa: E501
        :rtype: GrpcLocality
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this DashboardComponent.


        :param locality: The locality of this DashboardComponent.  # noqa: E501
        :type: GrpcLocality
        """

        self._locality = locality

    @property
    def directionality(self):
        """Gets the directionality of this DashboardComponent.  # noqa: E501


        :return: The directionality of this DashboardComponent.  # noqa: E501
        :rtype: GrpcDirectionality
        """
        return self._directionality

    @directionality.setter
    def directionality(self, directionality):
        """Sets the directionality of this DashboardComponent.


        :param directionality: The directionality of this DashboardComponent.  # noqa: E501
        :type: GrpcDirectionality
        """

        self._directionality = directionality

    @property
    def top_n(self):
        """Gets the top_n of this DashboardComponent.  # noqa: E501


        :return: The top_n of this DashboardComponent.  # noqa: E501
        :rtype: int
        """
        return self._top_n

    @top_n.setter
    def top_n(self, top_n):
        """Sets the top_n of this DashboardComponent.


        :param top_n: The top_n of this DashboardComponent.  # noqa: E501
        :type: int
        """

        self._top_n = top_n

    @property
    def top_n_sort(self):
        """Gets the top_n_sort of this DashboardComponent.  # noqa: E501

        Column to be sorted in the top n table.  # noqa: E501

        :return: The top_n_sort of this DashboardComponent.  # noqa: E501
        :rtype: str
        """
        return self._top_n_sort

    @top_n_sort.setter
    def top_n_sort(self, top_n_sort):
        """Sets the top_n_sort of this DashboardComponent.

        Column to be sorted in the top n table.  # noqa: E501

        :param top_n_sort: The top_n_sort of this DashboardComponent.  # noqa: E501
        :type: str
        """

        self._top_n_sort = top_n_sort

    @property
    def table_columns(self):
        """Gets the table_columns of this DashboardComponent.  # noqa: E501


        :return: The table_columns of this DashboardComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._table_columns

    @table_columns.setter
    def table_columns(self, table_columns):
        """Sets the table_columns of this DashboardComponent.


        :param table_columns: The table_columns of this DashboardComponent.  # noqa: E501
        :type: list[str]
        """

        self._table_columns = table_columns

    @property
    def top_k(self):
        """Gets the top_k of this DashboardComponent.  # noqa: E501

        Maximum number of time series to return. The default value is 30. Uses the default value if not set.  # noqa: E501

        :return: The top_k of this DashboardComponent.  # noqa: E501
        :rtype: int
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this DashboardComponent.

        Maximum number of time series to return. The default value is 30. Uses the default value if not set.  # noqa: E501

        :param top_k: The top_k of this DashboardComponent.  # noqa: E501
        :type: int
        """

        self._top_k = top_k

    @property
    def label_equality(self):
        """Gets the label_equality of this DashboardComponent.  # noqa: E501


        :return: The label_equality of this DashboardComponent.  # noqa: E501
        :rtype: list[GrpcLabelEqualityPair]
        """
        return self._label_equality

    @label_equality.setter
    def label_equality(self, label_equality):
        """Sets the label_equality of this DashboardComponent.


        :param label_equality: The label_equality of this DashboardComponent.  # noqa: E501
        :type: list[GrpcLabelEqualityPair]
        """

        self._label_equality = label_equality

    @property
    def equal_labels(self):
        """Gets the equal_labels of this DashboardComponent.  # noqa: E501


        :return: The equal_labels of this DashboardComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._equal_labels

    @equal_labels.setter
    def equal_labels(self, equal_labels):
        """Sets the equal_labels of this DashboardComponent.


        :param equal_labels: The equal_labels of this DashboardComponent.  # noqa: E501
        :type: list[str]
        """

        self._equal_labels = equal_labels

    @property
    def unequal_labels(self):
        """Gets the unequal_labels of this DashboardComponent.  # noqa: E501


        :return: The unequal_labels of this DashboardComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._unequal_labels

    @unequal_labels.setter
    def unequal_labels(self, unequal_labels):
        """Sets the unequal_labels of this DashboardComponent.


        :param unequal_labels: The unequal_labels of this DashboardComponent.  # noqa: E501
        :type: list[str]
        """

        self._unequal_labels = unequal_labels

    @property
    def source_grouping(self):
        """Gets the source_grouping of this DashboardComponent.  # noqa: E501


        :return: The source_grouping of this DashboardComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_grouping

    @source_grouping.setter
    def source_grouping(self, source_grouping):
        """Sets the source_grouping of this DashboardComponent.


        :param source_grouping: The source_grouping of this DashboardComponent.  # noqa: E501
        :type: list[str]
        """

        self._source_grouping = source_grouping

    @property
    def destination_grouping(self):
        """Gets the destination_grouping of this DashboardComponent.  # noqa: E501


        :return: The destination_grouping of this DashboardComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_grouping

    @destination_grouping.setter
    def destination_grouping(self, destination_grouping):
        """Sets the destination_grouping of this DashboardComponent.


        :param destination_grouping: The destination_grouping of this DashboardComponent.  # noqa: E501
        :type: list[str]
        """

        self._destination_grouping = destination_grouping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
