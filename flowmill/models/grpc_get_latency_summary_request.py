# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcGetLatencySummaryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'datetime',
        'end': 'datetime',
        'latency_class': 'GrpcLatencyClass',
        'min_latency': 'float',
        'grouping': 'GrpcGrouping',
        'latency_metric': 'GrpcLatencyMetric',
        'source_filters': 'list[GrpcFilter]',
        'destination_filters': 'list[GrpcFilter]',
        'no_rollups': 'bool'
    }

    attribute_map = {
        'start': 'start',
        'end': 'end',
        'latency_class': 'latencyClass',
        'min_latency': 'minLatency',
        'grouping': 'grouping',
        'latency_metric': 'latencyMetric',
        'source_filters': 'sourceFilters',
        'destination_filters': 'destinationFilters',
        'no_rollups': 'noRollups'
    }

    def __init__(self, start=None, end=None, latency_class=None, min_latency=None, grouping=None, latency_metric=None, source_filters=None, destination_filters=None, no_rollups=None):  # noqa: E501
        """GrpcGetLatencySummaryRequest - a model defined in Swagger"""  # noqa: E501

        self._start = None
        self._end = None
        self._latency_class = None
        self._min_latency = None
        self._grouping = None
        self._latency_metric = None
        self._source_filters = None
        self._destination_filters = None
        self._no_rollups = None
        self.discriminator = None

        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if latency_class is not None:
            self.latency_class = latency_class
        if min_latency is not None:
            self.min_latency = min_latency
        if grouping is not None:
            self.grouping = grouping
        if latency_metric is not None:
            self.latency_metric = latency_metric
        if source_filters is not None:
            self.source_filters = source_filters
        if destination_filters is not None:
            self.destination_filters = destination_filters
        if no_rollups is not None:
            self.no_rollups = no_rollups

    @property
    def start(self):
        """Gets the start of this GrpcGetLatencySummaryRequest.  # noqa: E501


        :return: The start of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this GrpcGetLatencySummaryRequest.


        :param start: The start of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this GrpcGetLatencySummaryRequest.  # noqa: E501


        :return: The end of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this GrpcGetLatencySummaryRequest.


        :param end: The end of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def latency_class(self):
        """Gets the latency_class of this GrpcGetLatencySummaryRequest.  # noqa: E501


        :return: The latency_class of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :rtype: GrpcLatencyClass
        """
        return self._latency_class

    @latency_class.setter
    def latency_class(self, latency_class):
        """Sets the latency_class of this GrpcGetLatencySummaryRequest.


        :param latency_class: The latency_class of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :type: GrpcLatencyClass
        """

        self._latency_class = latency_class

    @property
    def min_latency(self):
        """Gets the min_latency of this GrpcGetLatencySummaryRequest.  # noqa: E501


        :return: The min_latency of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :rtype: float
        """
        return self._min_latency

    @min_latency.setter
    def min_latency(self, min_latency):
        """Sets the min_latency of this GrpcGetLatencySummaryRequest.


        :param min_latency: The min_latency of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :type: float
        """

        self._min_latency = min_latency

    @property
    def grouping(self):
        """Gets the grouping of this GrpcGetLatencySummaryRequest.  # noqa: E501


        :return: The grouping of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :rtype: GrpcGrouping
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this GrpcGetLatencySummaryRequest.


        :param grouping: The grouping of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :type: GrpcGrouping
        """

        self._grouping = grouping

    @property
    def latency_metric(self):
        """Gets the latency_metric of this GrpcGetLatencySummaryRequest.  # noqa: E501


        :return: The latency_metric of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :rtype: GrpcLatencyMetric
        """
        return self._latency_metric

    @latency_metric.setter
    def latency_metric(self, latency_metric):
        """Sets the latency_metric of this GrpcGetLatencySummaryRequest.


        :param latency_metric: The latency_metric of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :type: GrpcLatencyMetric
        """

        self._latency_metric = latency_metric

    @property
    def source_filters(self):
        """Gets the source_filters of this GrpcGetLatencySummaryRequest.  # noqa: E501


        :return: The source_filters of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :rtype: list[GrpcFilter]
        """
        return self._source_filters

    @source_filters.setter
    def source_filters(self, source_filters):
        """Sets the source_filters of this GrpcGetLatencySummaryRequest.


        :param source_filters: The source_filters of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :type: list[GrpcFilter]
        """

        self._source_filters = source_filters

    @property
    def destination_filters(self):
        """Gets the destination_filters of this GrpcGetLatencySummaryRequest.  # noqa: E501


        :return: The destination_filters of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :rtype: list[GrpcFilter]
        """
        return self._destination_filters

    @destination_filters.setter
    def destination_filters(self, destination_filters):
        """Sets the destination_filters of this GrpcGetLatencySummaryRequest.


        :param destination_filters: The destination_filters of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :type: list[GrpcFilter]
        """

        self._destination_filters = destination_filters

    @property
    def no_rollups(self):
        """Gets the no_rollups of this GrpcGetLatencySummaryRequest.  # noqa: E501


        :return: The no_rollups of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._no_rollups

    @no_rollups.setter
    def no_rollups(self, no_rollups):
        """Sets the no_rollups of this GrpcGetLatencySummaryRequest.


        :param no_rollups: The no_rollups of this GrpcGetLatencySummaryRequest.  # noqa: E501
        :type: bool
        """

        self._no_rollups = no_rollups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcGetLatencySummaryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcGetLatencySummaryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
