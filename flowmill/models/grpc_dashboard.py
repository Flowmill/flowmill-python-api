# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcDashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'owner_email': 'str',
        'favorite': 'bool',
        'permission': 'DashboardPermission',
        'name': 'str',
        'layout': 'list[DashboardLayout]',
        'components': 'list[DashboardComponent]'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'owner_email': 'ownerEmail',
        'favorite': 'favorite',
        'permission': 'permission',
        'name': 'name',
        'layout': 'layout',
        'components': 'components'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, owner_email=None, favorite=None, permission=None, name=None, layout=None, components=None):  # noqa: E501
        """GrpcDashboard - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._updated_at = None
        self._owner_email = None
        self._favorite = None
        self._permission = None
        self._name = None
        self._layout = None
        self._components = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if owner_email is not None:
            self.owner_email = owner_email
        if favorite is not None:
            self.favorite = favorite
        if permission is not None:
            self.permission = permission
        if name is not None:
            self.name = name
        if layout is not None:
            self.layout = layout
        if components is not None:
            self.components = components

    @property
    def id(self):
        """Gets the id of this GrpcDashboard.  # noqa: E501

        Unique id associated with the dashboard This field is generated and handled by backend.  # noqa: E501

        :return: The id of this GrpcDashboard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GrpcDashboard.

        Unique id associated with the dashboard This field is generated and handled by backend.  # noqa: E501

        :param id: The id of this GrpcDashboard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this GrpcDashboard.  # noqa: E501

        When this dashboard is first created. This field is populated and handled by backend.  # noqa: E501

        :return: The created_at of this GrpcDashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GrpcDashboard.

        When this dashboard is first created. This field is populated and handled by backend.  # noqa: E501

        :param created_at: The created_at of this GrpcDashboard.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GrpcDashboard.  # noqa: E501

        When this dashboard is last updated. This field is populated and handled by backend.  # noqa: E501

        :return: The updated_at of this GrpcDashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GrpcDashboard.

        When this dashboard is last updated. This field is populated and handled by backend.  # noqa: E501

        :param updated_at: The updated_at of this GrpcDashboard.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def owner_email(self):
        """Gets the owner_email of this GrpcDashboard.  # noqa: E501

        Creator of the dashboard.  This field is set via authorization context from the 'POST' request, instead of manually fill-out.  NOTE: Current API specification does NOT support transferring ownership.       Do it in next iteration.  # noqa: E501

        :return: The owner_email of this GrpcDashboard.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this GrpcDashboard.

        Creator of the dashboard.  This field is set via authorization context from the 'POST' request, instead of manually fill-out.  NOTE: Current API specification does NOT support transferring ownership.       Do it in next iteration.  # noqa: E501

        :param owner_email: The owner_email of this GrpcDashboard.  # noqa: E501
        :type: str
        """

        self._owner_email = owner_email

    @property
    def favorite(self):
        """Gets the favorite of this GrpcDashboard.  # noqa: E501

        Whether the dashboard is marked as 'favorite' by the requester.  Note that one can 'favor' a dashboard created by other people, as long as the dashboard is marked 'global_readable'. One can use the AdjustDashboard request to mark certain dashboard is 'favorite'.  # noqa: E501

        :return: The favorite of this GrpcDashboard.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this GrpcDashboard.

        Whether the dashboard is marked as 'favorite' by the requester.  Note that one can 'favor' a dashboard created by other people, as long as the dashboard is marked 'global_readable'. One can use the AdjustDashboard request to mark certain dashboard is 'favorite'.  # noqa: E501

        :param favorite: The favorite of this GrpcDashboard.  # noqa: E501
        :type: bool
        """

        self._favorite = favorite

    @property
    def permission(self):
        """Gets the permission of this GrpcDashboard.  # noqa: E501


        :return: The permission of this GrpcDashboard.  # noqa: E501
        :rtype: DashboardPermission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this GrpcDashboard.


        :param permission: The permission of this GrpcDashboard.  # noqa: E501
        :type: DashboardPermission
        """

        self._permission = permission

    @property
    def name(self):
        """Gets the name of this GrpcDashboard.  # noqa: E501


        :return: The name of this GrpcDashboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrpcDashboard.


        :param name: The name of this GrpcDashboard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def layout(self):
        """Gets the layout of this GrpcDashboard.  # noqa: E501


        :return: The layout of this GrpcDashboard.  # noqa: E501
        :rtype: list[DashboardLayout]
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this GrpcDashboard.


        :param layout: The layout of this GrpcDashboard.  # noqa: E501
        :type: list[DashboardLayout]
        """

        self._layout = layout

    @property
    def components(self):
        """Gets the components of this GrpcDashboard.  # noqa: E501


        :return: The components of this GrpcDashboard.  # noqa: E501
        :rtype: list[DashboardComponent]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this GrpcDashboard.


        :param components: The components of this GrpcDashboard.  # noqa: E501
        :type: list[DashboardComponent]
        """

        self._components = components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcDashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcDashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
