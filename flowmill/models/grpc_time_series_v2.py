# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcTimeSeriesV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_labels': 'list[GrpcLabel]',
        'destination_labels': 'list[GrpcLabel]',
        'directionality': 'GrpcDirectionality',
        'max_value': 'float',
        'values': 'list[float]',
        'ok_values': 'list[float]',
        'bad_values': 'list[float]'
    }

    attribute_map = {
        'source_labels': 'sourceLabels',
        'destination_labels': 'destinationLabels',
        'directionality': 'directionality',
        'max_value': 'maxValue',
        'values': 'values',
        'ok_values': 'okValues',
        'bad_values': 'badValues'
    }

    def __init__(self, source_labels=None, destination_labels=None, directionality=None, max_value=None, values=None, ok_values=None, bad_values=None):  # noqa: E501
        """GrpcTimeSeriesV2 - a model defined in Swagger"""  # noqa: E501

        self._source_labels = None
        self._destination_labels = None
        self._directionality = None
        self._max_value = None
        self._values = None
        self._ok_values = None
        self._bad_values = None
        self.discriminator = None

        if source_labels is not None:
            self.source_labels = source_labels
        if destination_labels is not None:
            self.destination_labels = destination_labels
        if directionality is not None:
            self.directionality = directionality
        if max_value is not None:
            self.max_value = max_value
        if values is not None:
            self.values = values
        if ok_values is not None:
            self.ok_values = ok_values
        if bad_values is not None:
            self.bad_values = bad_values

    @property
    def source_labels(self):
        """Gets the source_labels of this GrpcTimeSeriesV2.  # noqa: E501

        Set of labels identifying this timeseries.  # noqa: E501

        :return: The source_labels of this GrpcTimeSeriesV2.  # noqa: E501
        :rtype: list[GrpcLabel]
        """
        return self._source_labels

    @source_labels.setter
    def source_labels(self, source_labels):
        """Sets the source_labels of this GrpcTimeSeriesV2.

        Set of labels identifying this timeseries.  # noqa: E501

        :param source_labels: The source_labels of this GrpcTimeSeriesV2.  # noqa: E501
        :type: list[GrpcLabel]
        """

        self._source_labels = source_labels

    @property
    def destination_labels(self):
        """Gets the destination_labels of this GrpcTimeSeriesV2.  # noqa: E501


        :return: The destination_labels of this GrpcTimeSeriesV2.  # noqa: E501
        :rtype: list[GrpcLabel]
        """
        return self._destination_labels

    @destination_labels.setter
    def destination_labels(self, destination_labels):
        """Sets the destination_labels of this GrpcTimeSeriesV2.


        :param destination_labels: The destination_labels of this GrpcTimeSeriesV2.  # noqa: E501
        :type: list[GrpcLabel]
        """

        self._destination_labels = destination_labels

    @property
    def directionality(self):
        """Gets the directionality of this GrpcTimeSeriesV2.  # noqa: E501

        Specified the directionality of the timeseries relative to how the query was written, either FORWARD or REVERSE.  # noqa: E501

        :return: The directionality of this GrpcTimeSeriesV2.  # noqa: E501
        :rtype: GrpcDirectionality
        """
        return self._directionality

    @directionality.setter
    def directionality(self, directionality):
        """Sets the directionality of this GrpcTimeSeriesV2.

        Specified the directionality of the timeseries relative to how the query was written, either FORWARD or REVERSE.  # noqa: E501

        :param directionality: The directionality of this GrpcTimeSeriesV2.  # noqa: E501
        :type: GrpcDirectionality
        """

        self._directionality = directionality

    @property
    def max_value(self):
        """Gets the max_value of this GrpcTimeSeriesV2.  # noqa: E501

        Max value of the returned values.  # noqa: E501

        :return: The max_value of this GrpcTimeSeriesV2.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this GrpcTimeSeriesV2.

        Max value of the returned values.  # noqa: E501

        :param max_value: The max_value of this GrpcTimeSeriesV2.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def values(self):
        """Gets the values of this GrpcTimeSeriesV2.  # noqa: E501

        List of points for this timeseries.  The points in values correspond to TSDB samples aggregated over time ranges:    - values[0] is the range (start, start + (step)]    - values[1] is the range (start + step, start + (step * 2)]    - values[2] is the range (start + (step * 2), start + (step * 3)]      ...    - values[i] is the range (start + (step * i), start + (step * (i +    1))]  If there are no TSDB samples for a given step in (start, end], we will fill that step with a value using the requested no_zero_padding (see GetTimeSeriesV2 request above).  # noqa: E501

        :return: The values of this GrpcTimeSeriesV2.  # noqa: E501
        :rtype: list[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this GrpcTimeSeriesV2.

        List of points for this timeseries.  The points in values correspond to TSDB samples aggregated over time ranges:    - values[0] is the range (start, start + (step)]    - values[1] is the range (start + step, start + (step * 2)]    - values[2] is the range (start + (step * 2), start + (step * 3)]      ...    - values[i] is the range (start + (step * i), start + (step * (i +    1))]  If there are no TSDB samples for a given step in (start, end], we will fill that step with a value using the requested no_zero_padding (see GetTimeSeriesV2 request above).  # noqa: E501

        :param values: The values of this GrpcTimeSeriesV2.  # noqa: E501
        :type: list[float]
        """

        self._values = values

    @property
    def ok_values(self):
        """Gets the ok_values of this GrpcTimeSeriesV2.  # noqa: E501

        When returning percent metrics, we also include the values used to compute the percent. These will be undefined for non-percent metrics.  Except for 'drops', all of the percent metrics have a suffix '_percent'.  Examples:  - for the metric 'drops' the ok_values will be 'tcp_packets' and    bad_values will be 'tcp_retrans'  - for the metric 'connection_errors_percent' the ok_values will be    'new_sockets' and the bad_values will be 'syn_timeouts'  # noqa: E501

        :return: The ok_values of this GrpcTimeSeriesV2.  # noqa: E501
        :rtype: list[float]
        """
        return self._ok_values

    @ok_values.setter
    def ok_values(self, ok_values):
        """Sets the ok_values of this GrpcTimeSeriesV2.

        When returning percent metrics, we also include the values used to compute the percent. These will be undefined for non-percent metrics.  Except for 'drops', all of the percent metrics have a suffix '_percent'.  Examples:  - for the metric 'drops' the ok_values will be 'tcp_packets' and    bad_values will be 'tcp_retrans'  - for the metric 'connection_errors_percent' the ok_values will be    'new_sockets' and the bad_values will be 'syn_timeouts'  # noqa: E501

        :param ok_values: The ok_values of this GrpcTimeSeriesV2.  # noqa: E501
        :type: list[float]
        """

        self._ok_values = ok_values

    @property
    def bad_values(self):
        """Gets the bad_values of this GrpcTimeSeriesV2.  # noqa: E501


        :return: The bad_values of this GrpcTimeSeriesV2.  # noqa: E501
        :rtype: list[float]
        """
        return self._bad_values

    @bad_values.setter
    def bad_values(self, bad_values):
        """Sets the bad_values of this GrpcTimeSeriesV2.


        :param bad_values: The bad_values of this GrpcTimeSeriesV2.  # noqa: E501
        :type: list[float]
        """

        self._bad_values = bad_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcTimeSeriesV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcTimeSeriesV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
