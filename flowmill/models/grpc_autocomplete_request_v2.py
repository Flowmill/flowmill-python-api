# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcAutocompleteRequestV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end': 'datetime',
        'duration': 'str',
        'filters': 'list[GrpcFilter]',
        'label': 'str',
        'metrics': 'list[str]',
        'directionality': 'GrpcDirectionality'
    }

    attribute_map = {
        'end': 'end',
        'duration': 'duration',
        'filters': 'filters',
        'label': 'label',
        'metrics': 'metrics',
        'directionality': 'directionality'
    }

    def __init__(self, end=None, duration=None, filters=None, label=None, metrics=None, directionality=None):  # noqa: E501
        """GrpcAutocompleteRequestV2 - a model defined in Swagger"""  # noqa: E501

        self._end = None
        self._duration = None
        self._filters = None
        self._label = None
        self._metrics = None
        self._directionality = None
        self.discriminator = None

        if end is not None:
            self.end = end
        if duration is not None:
            self.duration = duration
        if filters is not None:
            self.filters = filters
        if label is not None:
            self.label = label
        if metrics is not None:
            self.metrics = metrics
        if directionality is not None:
            self.directionality = directionality

    @property
    def end(self):
        """Gets the end of this GrpcAutocompleteRequestV2.  # noqa: E501

        Returns autocomplete options in the range (end - duration, end].  # noqa: E501

        :return: The end of this GrpcAutocompleteRequestV2.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this GrpcAutocompleteRequestV2.

        Returns autocomplete options in the range (end - duration, end].  # noqa: E501

        :param end: The end of this GrpcAutocompleteRequestV2.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def duration(self):
        """Gets the duration of this GrpcAutocompleteRequestV2.  # noqa: E501


        :return: The duration of this GrpcAutocompleteRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GrpcAutocompleteRequestV2.


        :param duration: The duration of this GrpcAutocompleteRequestV2.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def filters(self):
        """Gets the filters of this GrpcAutocompleteRequestV2.  # noqa: E501

        Returns autocomplete options within this set of filters.  We can use this to provide typeahead hints for a partially constructed query. For example, we can query: give me all the options within a specific environment or namespace.  # noqa: E501

        :return: The filters of this GrpcAutocompleteRequestV2.  # noqa: E501
        :rtype: list[GrpcFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this GrpcAutocompleteRequestV2.

        Returns autocomplete options within this set of filters.  We can use this to provide typeahead hints for a partially constructed query. For example, we can query: give me all the options within a specific environment or namespace.  # noqa: E501

        :param filters: The filters of this GrpcAutocompleteRequestV2.  # noqa: E501
        :type: list[GrpcFilter]
        """

        self._filters = filters

    @property
    def label(self):
        """Gets the label of this GrpcAutocompleteRequestV2.  # noqa: E501

        Label to return options for.  Note: this expects a label with our legacy 's' and 'd' prefixes, such as, for example, 'senv' or 'drole'.  # noqa: E501

        :return: The label of this GrpcAutocompleteRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GrpcAutocompleteRequestV2.

        Label to return options for.  Note: this expects a label with our legacy 's' and 'd' prefixes, such as, for example, 'senv' or 'drole'.  # noqa: E501

        :param label: The label of this GrpcAutocompleteRequestV2.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def metrics(self):
        """Gets the metrics of this GrpcAutocompleteRequestV2.  # noqa: E501

        List of metrics to search for autocomplete options.  We commonly use ['bytes', 'udp_bytes'] when populating the environment selector in the frontend.  # noqa: E501

        :return: The metrics of this GrpcAutocompleteRequestV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this GrpcAutocompleteRequestV2.

        List of metrics to search for autocomplete options.  We commonly use ['bytes', 'udp_bytes'] when populating the environment selector in the frontend.  # noqa: E501

        :param metrics: The metrics of this GrpcAutocompleteRequestV2.  # noqa: E501
        :type: list[str]
        """

        self._metrics = metrics

    @property
    def directionality(self):
        """Gets the directionality of this GrpcAutocompleteRequestV2.  # noqa: E501

        Query for timeseries matching this directionality. See TimeSeriesRequestV2.directionality for more context.  # noqa: E501

        :return: The directionality of this GrpcAutocompleteRequestV2.  # noqa: E501
        :rtype: GrpcDirectionality
        """
        return self._directionality

    @directionality.setter
    def directionality(self, directionality):
        """Sets the directionality of this GrpcAutocompleteRequestV2.

        Query for timeseries matching this directionality. See TimeSeriesRequestV2.directionality for more context.  # noqa: E501

        :param directionality: The directionality of this GrpcAutocompleteRequestV2.  # noqa: E501
        :type: GrpcDirectionality
        """

        self._directionality = directionality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcAutocompleteRequestV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcAutocompleteRequestV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
