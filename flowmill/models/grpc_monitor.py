# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcMonitor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'focus_zoom': 'str',
        'peer_zoom': 'str',
        'source_grouping': 'list[str]',
        'destination_grouping': 'list[str]',
        'src_filters': 'list[GrpcFilter]',
        'dst_filters': 'list[GrpcFilter]',
        'primary_condition': 'MonitorCondition',
        'secondary_conditions': 'list[MonitorCondition]',
        'slack': 'str',
        'webhook': 'str',
        'msg': 'str',
        'slack_token_ids': 'list[int]',
        'pagerduty_token_ids': 'list[int]',
        'state': 'MonitorState'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'focus_zoom': 'focusZoom',
        'peer_zoom': 'peerZoom',
        'source_grouping': 'sourceGrouping',
        'destination_grouping': 'destinationGrouping',
        'src_filters': 'srcFilters',
        'dst_filters': 'dstFilters',
        'primary_condition': 'primaryCondition',
        'secondary_conditions': 'secondaryConditions',
        'slack': 'slack',
        'webhook': 'webhook',
        'msg': 'msg',
        'slack_token_ids': 'slackTokenIds',
        'pagerduty_token_ids': 'pagerdutyTokenIds',
        'state': 'state'
    }

    def __init__(self, name=None, description=None, id=None, created_at=None, updated_at=None, focus_zoom=None, peer_zoom=None, source_grouping=None, destination_grouping=None, src_filters=None, dst_filters=None, primary_condition=None, secondary_conditions=None, slack=None, webhook=None, msg=None, slack_token_ids=None, pagerduty_token_ids=None, state=None):  # noqa: E501
        """GrpcMonitor - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._focus_zoom = None
        self._peer_zoom = None
        self._source_grouping = None
        self._destination_grouping = None
        self._src_filters = None
        self._dst_filters = None
        self._primary_condition = None
        self._secondary_conditions = None
        self._slack = None
        self._webhook = None
        self._msg = None
        self._slack_token_ids = None
        self._pagerduty_token_ids = None
        self._state = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if focus_zoom is not None:
            self.focus_zoom = focus_zoom
        if peer_zoom is not None:
            self.peer_zoom = peer_zoom
        if source_grouping is not None:
            self.source_grouping = source_grouping
        if destination_grouping is not None:
            self.destination_grouping = destination_grouping
        if src_filters is not None:
            self.src_filters = src_filters
        if dst_filters is not None:
            self.dst_filters = dst_filters
        if primary_condition is not None:
            self.primary_condition = primary_condition
        if secondary_conditions is not None:
            self.secondary_conditions = secondary_conditions
        if slack is not None:
            self.slack = slack
        if webhook is not None:
            self.webhook = webhook
        if msg is not None:
            self.msg = msg
        if slack_token_ids is not None:
            self.slack_token_ids = slack_token_ids
        if pagerduty_token_ids is not None:
            self.pagerduty_token_ids = pagerduty_token_ids
        if state is not None:
            self.state = state

    @property
    def name(self):
        """Gets the name of this GrpcMonitor.  # noqa: E501

        Name of the monitor.  # noqa: E501

        :return: The name of this GrpcMonitor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrpcMonitor.

        Name of the monitor.  # noqa: E501

        :param name: The name of this GrpcMonitor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GrpcMonitor.  # noqa: E501

        A human-readable description of the monitor.  # noqa: E501

        :return: The description of this GrpcMonitor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GrpcMonitor.

        A human-readable description of the monitor.  # noqa: E501

        :param description: The description of this GrpcMonitor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this GrpcMonitor.  # noqa: E501


        :return: The id of this GrpcMonitor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GrpcMonitor.


        :param id: The id of this GrpcMonitor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this GrpcMonitor.  # noqa: E501

        When this monitor is first created. This field is populated and handled by backend.  # noqa: E501

        :return: The created_at of this GrpcMonitor.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GrpcMonitor.

        When this monitor is first created. This field is populated and handled by backend.  # noqa: E501

        :param created_at: The created_at of this GrpcMonitor.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GrpcMonitor.  # noqa: E501

        When this monitor is last updated. This field is populated and handled by backend.  # noqa: E501

        :return: The updated_at of this GrpcMonitor.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GrpcMonitor.

        When this monitor is last updated. This field is populated and handled by backend.  # noqa: E501

        :param updated_at: The updated_at of this GrpcMonitor.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def focus_zoom(self):
        """Gets the focus_zoom of this GrpcMonitor.  # noqa: E501

        Breakdown/label grouping fields. Prefer explicit labels over zoom fields.  # noqa: E501

        :return: The focus_zoom of this GrpcMonitor.  # noqa: E501
        :rtype: str
        """
        return self._focus_zoom

    @focus_zoom.setter
    def focus_zoom(self, focus_zoom):
        """Sets the focus_zoom of this GrpcMonitor.

        Breakdown/label grouping fields. Prefer explicit labels over zoom fields.  # noqa: E501

        :param focus_zoom: The focus_zoom of this GrpcMonitor.  # noqa: E501
        :type: str
        """

        self._focus_zoom = focus_zoom

    @property
    def peer_zoom(self):
        """Gets the peer_zoom of this GrpcMonitor.  # noqa: E501


        :return: The peer_zoom of this GrpcMonitor.  # noqa: E501
        :rtype: str
        """
        return self._peer_zoom

    @peer_zoom.setter
    def peer_zoom(self, peer_zoom):
        """Sets the peer_zoom of this GrpcMonitor.


        :param peer_zoom: The peer_zoom of this GrpcMonitor.  # noqa: E501
        :type: str
        """

        self._peer_zoom = peer_zoom

    @property
    def source_grouping(self):
        """Gets the source_grouping of this GrpcMonitor.  # noqa: E501


        :return: The source_grouping of this GrpcMonitor.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_grouping

    @source_grouping.setter
    def source_grouping(self, source_grouping):
        """Sets the source_grouping of this GrpcMonitor.


        :param source_grouping: The source_grouping of this GrpcMonitor.  # noqa: E501
        :type: list[str]
        """

        self._source_grouping = source_grouping

    @property
    def destination_grouping(self):
        """Gets the destination_grouping of this GrpcMonitor.  # noqa: E501


        :return: The destination_grouping of this GrpcMonitor.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_grouping

    @destination_grouping.setter
    def destination_grouping(self, destination_grouping):
        """Sets the destination_grouping of this GrpcMonitor.


        :param destination_grouping: The destination_grouping of this GrpcMonitor.  # noqa: E501
        :type: list[str]
        """

        self._destination_grouping = destination_grouping

    @property
    def src_filters(self):
        """Gets the src_filters of this GrpcMonitor.  # noqa: E501


        :return: The src_filters of this GrpcMonitor.  # noqa: E501
        :rtype: list[GrpcFilter]
        """
        return self._src_filters

    @src_filters.setter
    def src_filters(self, src_filters):
        """Sets the src_filters of this GrpcMonitor.


        :param src_filters: The src_filters of this GrpcMonitor.  # noqa: E501
        :type: list[GrpcFilter]
        """

        self._src_filters = src_filters

    @property
    def dst_filters(self):
        """Gets the dst_filters of this GrpcMonitor.  # noqa: E501


        :return: The dst_filters of this GrpcMonitor.  # noqa: E501
        :rtype: list[GrpcFilter]
        """
        return self._dst_filters

    @dst_filters.setter
    def dst_filters(self, dst_filters):
        """Sets the dst_filters of this GrpcMonitor.


        :param dst_filters: The dst_filters of this GrpcMonitor.  # noqa: E501
        :type: list[GrpcFilter]
        """

        self._dst_filters = dst_filters

    @property
    def primary_condition(self):
        """Gets the primary_condition of this GrpcMonitor.  # noqa: E501


        :return: The primary_condition of this GrpcMonitor.  # noqa: E501
        :rtype: MonitorCondition
        """
        return self._primary_condition

    @primary_condition.setter
    def primary_condition(self, primary_condition):
        """Sets the primary_condition of this GrpcMonitor.


        :param primary_condition: The primary_condition of this GrpcMonitor.  # noqa: E501
        :type: MonitorCondition
        """

        self._primary_condition = primary_condition

    @property
    def secondary_conditions(self):
        """Gets the secondary_conditions of this GrpcMonitor.  # noqa: E501


        :return: The secondary_conditions of this GrpcMonitor.  # noqa: E501
        :rtype: list[MonitorCondition]
        """
        return self._secondary_conditions

    @secondary_conditions.setter
    def secondary_conditions(self, secondary_conditions):
        """Sets the secondary_conditions of this GrpcMonitor.


        :param secondary_conditions: The secondary_conditions of this GrpcMonitor.  # noqa: E501
        :type: list[MonitorCondition]
        """

        self._secondary_conditions = secondary_conditions

    @property
    def slack(self):
        """Gets the slack of this GrpcMonitor.  # noqa: E501


        :return: The slack of this GrpcMonitor.  # noqa: E501
        :rtype: str
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this GrpcMonitor.


        :param slack: The slack of this GrpcMonitor.  # noqa: E501
        :type: str
        """

        self._slack = slack

    @property
    def webhook(self):
        """Gets the webhook of this GrpcMonitor.  # noqa: E501


        :return: The webhook of this GrpcMonitor.  # noqa: E501
        :rtype: str
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this GrpcMonitor.


        :param webhook: The webhook of this GrpcMonitor.  # noqa: E501
        :type: str
        """

        self._webhook = webhook

    @property
    def msg(self):
        """Gets the msg of this GrpcMonitor.  # noqa: E501


        :return: The msg of this GrpcMonitor.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this GrpcMonitor.


        :param msg: The msg of this GrpcMonitor.  # noqa: E501
        :type: str
        """

        self._msg = msg

    @property
    def slack_token_ids(self):
        """Gets the slack_token_ids of this GrpcMonitor.  # noqa: E501

        Ids of Slack tokens identifying channels to which alerts will be fired. These are the DB ids, not the actual tokens themselves.  # noqa: E501

        :return: The slack_token_ids of this GrpcMonitor.  # noqa: E501
        :rtype: list[int]
        """
        return self._slack_token_ids

    @slack_token_ids.setter
    def slack_token_ids(self, slack_token_ids):
        """Sets the slack_token_ids of this GrpcMonitor.

        Ids of Slack tokens identifying channels to which alerts will be fired. These are the DB ids, not the actual tokens themselves.  # noqa: E501

        :param slack_token_ids: The slack_token_ids of this GrpcMonitor.  # noqa: E501
        :type: list[int]
        """

        self._slack_token_ids = slack_token_ids

    @property
    def pagerduty_token_ids(self):
        """Gets the pagerduty_token_ids of this GrpcMonitor.  # noqa: E501

        Ids of pagerduty account tokens where the alerts will be fired. These are the DB ids, not the actual tokens themselves.  # noqa: E501

        :return: The pagerduty_token_ids of this GrpcMonitor.  # noqa: E501
        :rtype: list[int]
        """
        return self._pagerduty_token_ids

    @pagerduty_token_ids.setter
    def pagerduty_token_ids(self, pagerduty_token_ids):
        """Sets the pagerduty_token_ids of this GrpcMonitor.

        Ids of pagerduty account tokens where the alerts will be fired. These are the DB ids, not the actual tokens themselves.  # noqa: E501

        :param pagerduty_token_ids: The pagerduty_token_ids of this GrpcMonitor.  # noqa: E501
        :type: list[int]
        """

        self._pagerduty_token_ids = pagerduty_token_ids

    @property
    def state(self):
        """Gets the state of this GrpcMonitor.  # noqa: E501


        :return: The state of this GrpcMonitor.  # noqa: E501
        :rtype: MonitorState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GrpcMonitor.


        :param state: The state of this GrpcMonitor.  # noqa: E501
        :type: MonitorState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcMonitor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcMonitor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
