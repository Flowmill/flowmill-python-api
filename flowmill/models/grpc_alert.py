# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'message': 'str',
        'monitor_id': 'str',
        'alert_status': 'GrpcAlertStatus',
        'severity': 'MonitorSeverity',
        'monitor': 'GrpcMonitor',
        'labels': 'list[GrpcLabel]',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'message': 'message',
        'monitor_id': 'monitorId',
        'alert_status': 'alertStatus',
        'severity': 'severity',
        'monitor': 'monitor',
        'labels': 'labels',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, message=None, monitor_id=None, alert_status=None, severity=None, monitor=None, labels=None, created_at=None, updated_at=None):  # noqa: E501
        """GrpcAlert - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._message = None
        self._monitor_id = None
        self._alert_status = None
        self._severity = None
        self._monitor = None
        self._labels = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if monitor_id is not None:
            self.monitor_id = monitor_id
        if alert_status is not None:
            self.alert_status = alert_status
        if severity is not None:
            self.severity = severity
        if monitor is not None:
            self.monitor = monitor
        if labels is not None:
            self.labels = labels
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this GrpcAlert.  # noqa: E501


        :return: The id of this GrpcAlert.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GrpcAlert.


        :param id: The id of this GrpcAlert.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this GrpcAlert.  # noqa: E501


        :return: The message of this GrpcAlert.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GrpcAlert.


        :param message: The message of this GrpcAlert.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def monitor_id(self):
        """Gets the monitor_id of this GrpcAlert.  # noqa: E501

        The id of the monitor that triggers the alert.  # noqa: E501

        :return: The monitor_id of this GrpcAlert.  # noqa: E501
        :rtype: str
        """
        return self._monitor_id

    @monitor_id.setter
    def monitor_id(self, monitor_id):
        """Sets the monitor_id of this GrpcAlert.

        The id of the monitor that triggers the alert.  # noqa: E501

        :param monitor_id: The monitor_id of this GrpcAlert.  # noqa: E501
        :type: str
        """

        self._monitor_id = monitor_id

    @property
    def alert_status(self):
        """Gets the alert_status of this GrpcAlert.  # noqa: E501

        Status of the alert.  # noqa: E501

        :return: The alert_status of this GrpcAlert.  # noqa: E501
        :rtype: GrpcAlertStatus
        """
        return self._alert_status

    @alert_status.setter
    def alert_status(self, alert_status):
        """Sets the alert_status of this GrpcAlert.

        Status of the alert.  # noqa: E501

        :param alert_status: The alert_status of this GrpcAlert.  # noqa: E501
        :type: GrpcAlertStatus
        """

        self._alert_status = alert_status

    @property
    def severity(self):
        """Gets the severity of this GrpcAlert.  # noqa: E501

        Severity of this alert.  # noqa: E501

        :return: The severity of this GrpcAlert.  # noqa: E501
        :rtype: MonitorSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GrpcAlert.

        Severity of this alert.  # noqa: E501

        :param severity: The severity of this GrpcAlert.  # noqa: E501
        :type: MonitorSeverity
        """

        self._severity = severity

    @property
    def monitor(self):
        """Gets the monitor of this GrpcAlert.  # noqa: E501

        Monitor that triggers the alert.  # noqa: E501

        :return: The monitor of this GrpcAlert.  # noqa: E501
        :rtype: GrpcMonitor
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this GrpcAlert.

        Monitor that triggers the alert.  # noqa: E501

        :param monitor: The monitor of this GrpcAlert.  # noqa: E501
        :type: GrpcMonitor
        """

        self._monitor = monitor

    @property
    def labels(self):
        """Gets the labels of this GrpcAlert.  # noqa: E501

        A set of labels that can be used to distinguish multiple distinct alerts produced from the same monitor.  # noqa: E501

        :return: The labels of this GrpcAlert.  # noqa: E501
        :rtype: list[GrpcLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GrpcAlert.

        A set of labels that can be used to distinguish multiple distinct alerts produced from the same monitor.  # noqa: E501

        :param labels: The labels of this GrpcAlert.  # noqa: E501
        :type: list[GrpcLabel]
        """

        self._labels = labels

    @property
    def created_at(self):
        """Gets the created_at of this GrpcAlert.  # noqa: E501


        :return: The created_at of this GrpcAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GrpcAlert.


        :param created_at: The created_at of this GrpcAlert.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GrpcAlert.  # noqa: E501


        :return: The updated_at of this GrpcAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GrpcAlert.


        :param updated_at: The updated_at of this GrpcAlert.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
