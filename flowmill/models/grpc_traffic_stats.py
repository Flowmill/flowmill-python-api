# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcTrafficStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_labels': 'list[GrpcLabel]',
        'destination_labels': 'list[GrpcLabel]',
        'percent_change_in_traffic': 'float',
        'entire_window_average_bytes_per_second': 'float',
        'second_half_window_average_bytes_per_second': 'float'
    }

    attribute_map = {
        'source_labels': 'sourceLabels',
        'destination_labels': 'destinationLabels',
        'percent_change_in_traffic': 'percentChangeInTraffic',
        'entire_window_average_bytes_per_second': 'entireWindowAverageBytesPerSecond',
        'second_half_window_average_bytes_per_second': 'secondHalfWindowAverageBytesPerSecond'
    }

    def __init__(self, source_labels=None, destination_labels=None, percent_change_in_traffic=None, entire_window_average_bytes_per_second=None, second_half_window_average_bytes_per_second=None):  # noqa: E501
        """GrpcTrafficStats - a model defined in Swagger"""  # noqa: E501

        self._source_labels = None
        self._destination_labels = None
        self._percent_change_in_traffic = None
        self._entire_window_average_bytes_per_second = None
        self._second_half_window_average_bytes_per_second = None
        self.discriminator = None

        if source_labels is not None:
            self.source_labels = source_labels
        if destination_labels is not None:
            self.destination_labels = destination_labels
        if percent_change_in_traffic is not None:
            self.percent_change_in_traffic = percent_change_in_traffic
        if entire_window_average_bytes_per_second is not None:
            self.entire_window_average_bytes_per_second = entire_window_average_bytes_per_second
        if second_half_window_average_bytes_per_second is not None:
            self.second_half_window_average_bytes_per_second = second_half_window_average_bytes_per_second

    @property
    def source_labels(self):
        """Gets the source_labels of this GrpcTrafficStats.  # noqa: E501


        :return: The source_labels of this GrpcTrafficStats.  # noqa: E501
        :rtype: list[GrpcLabel]
        """
        return self._source_labels

    @source_labels.setter
    def source_labels(self, source_labels):
        """Sets the source_labels of this GrpcTrafficStats.


        :param source_labels: The source_labels of this GrpcTrafficStats.  # noqa: E501
        :type: list[GrpcLabel]
        """

        self._source_labels = source_labels

    @property
    def destination_labels(self):
        """Gets the destination_labels of this GrpcTrafficStats.  # noqa: E501


        :return: The destination_labels of this GrpcTrafficStats.  # noqa: E501
        :rtype: list[GrpcLabel]
        """
        return self._destination_labels

    @destination_labels.setter
    def destination_labels(self, destination_labels):
        """Sets the destination_labels of this GrpcTrafficStats.


        :param destination_labels: The destination_labels of this GrpcTrafficStats.  # noqa: E501
        :type: list[GrpcLabel]
        """

        self._destination_labels = destination_labels

    @property
    def percent_change_in_traffic(self):
        """Gets the percent_change_in_traffic of this GrpcTrafficStats.  # noqa: E501


        :return: The percent_change_in_traffic of this GrpcTrafficStats.  # noqa: E501
        :rtype: float
        """
        return self._percent_change_in_traffic

    @percent_change_in_traffic.setter
    def percent_change_in_traffic(self, percent_change_in_traffic):
        """Sets the percent_change_in_traffic of this GrpcTrafficStats.


        :param percent_change_in_traffic: The percent_change_in_traffic of this GrpcTrafficStats.  # noqa: E501
        :type: float
        """

        self._percent_change_in_traffic = percent_change_in_traffic

    @property
    def entire_window_average_bytes_per_second(self):
        """Gets the entire_window_average_bytes_per_second of this GrpcTrafficStats.  # noqa: E501


        :return: The entire_window_average_bytes_per_second of this GrpcTrafficStats.  # noqa: E501
        :rtype: float
        """
        return self._entire_window_average_bytes_per_second

    @entire_window_average_bytes_per_second.setter
    def entire_window_average_bytes_per_second(self, entire_window_average_bytes_per_second):
        """Sets the entire_window_average_bytes_per_second of this GrpcTrafficStats.


        :param entire_window_average_bytes_per_second: The entire_window_average_bytes_per_second of this GrpcTrafficStats.  # noqa: E501
        :type: float
        """

        self._entire_window_average_bytes_per_second = entire_window_average_bytes_per_second

    @property
    def second_half_window_average_bytes_per_second(self):
        """Gets the second_half_window_average_bytes_per_second of this GrpcTrafficStats.  # noqa: E501


        :return: The second_half_window_average_bytes_per_second of this GrpcTrafficStats.  # noqa: E501
        :rtype: float
        """
        return self._second_half_window_average_bytes_per_second

    @second_half_window_average_bytes_per_second.setter
    def second_half_window_average_bytes_per_second(self, second_half_window_average_bytes_per_second):
        """Sets the second_half_window_average_bytes_per_second of this GrpcTrafficStats.


        :param second_half_window_average_bytes_per_second: The second_half_window_average_bytes_per_second of this GrpcTrafficStats.  # noqa: E501
        :type: float
        """

        self._second_half_window_average_bytes_per_second = second_half_window_average_bytes_per_second

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcTrafficStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcTrafficStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
