# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcCostTableBreakdown(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tcp_traffic': 'float',
        'udp_traffic': 'float',
        'total_traffic': 'float',
        'total_cost': 'float'
    }

    attribute_map = {
        'tcp_traffic': 'tcpTraffic',
        'udp_traffic': 'udpTraffic',
        'total_traffic': 'totalTraffic',
        'total_cost': 'totalCost'
    }

    def __init__(self, tcp_traffic=None, udp_traffic=None, total_traffic=None, total_cost=None):  # noqa: E501
        """GrpcCostTableBreakdown - a model defined in Swagger"""  # noqa: E501

        self._tcp_traffic = None
        self._udp_traffic = None
        self._total_traffic = None
        self._total_cost = None
        self.discriminator = None

        if tcp_traffic is not None:
            self.tcp_traffic = tcp_traffic
        if udp_traffic is not None:
            self.udp_traffic = udp_traffic
        if total_traffic is not None:
            self.total_traffic = total_traffic
        if total_cost is not None:
            self.total_cost = total_cost

    @property
    def tcp_traffic(self):
        """Gets the tcp_traffic of this GrpcCostTableBreakdown.  # noqa: E501


        :return: The tcp_traffic of this GrpcCostTableBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._tcp_traffic

    @tcp_traffic.setter
    def tcp_traffic(self, tcp_traffic):
        """Sets the tcp_traffic of this GrpcCostTableBreakdown.


        :param tcp_traffic: The tcp_traffic of this GrpcCostTableBreakdown.  # noqa: E501
        :type: float
        """

        self._tcp_traffic = tcp_traffic

    @property
    def udp_traffic(self):
        """Gets the udp_traffic of this GrpcCostTableBreakdown.  # noqa: E501


        :return: The udp_traffic of this GrpcCostTableBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._udp_traffic

    @udp_traffic.setter
    def udp_traffic(self, udp_traffic):
        """Sets the udp_traffic of this GrpcCostTableBreakdown.


        :param udp_traffic: The udp_traffic of this GrpcCostTableBreakdown.  # noqa: E501
        :type: float
        """

        self._udp_traffic = udp_traffic

    @property
    def total_traffic(self):
        """Gets the total_traffic of this GrpcCostTableBreakdown.  # noqa: E501


        :return: The total_traffic of this GrpcCostTableBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._total_traffic

    @total_traffic.setter
    def total_traffic(self, total_traffic):
        """Sets the total_traffic of this GrpcCostTableBreakdown.


        :param total_traffic: The total_traffic of this GrpcCostTableBreakdown.  # noqa: E501
        :type: float
        """

        self._total_traffic = total_traffic

    @property
    def total_cost(self):
        """Gets the total_cost of this GrpcCostTableBreakdown.  # noqa: E501


        :return: The total_cost of this GrpcCostTableBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this GrpcCostTableBreakdown.


        :param total_cost: The total_cost of this GrpcCostTableBreakdown.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcCostTableBreakdown, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcCostTableBreakdown):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
