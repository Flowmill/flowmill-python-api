# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TimeSeriesResponseTimeSeries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'labels': 'list[GrpcLabel]',
        'source_labels': 'list[GrpcLabel]',
        'destination_labels': 'list[GrpcLabel]',
        'directionality': 'GrpcDirectionality',
        'max_value': 'float',
        'points': 'GrpcPoint'
    }

    attribute_map = {
        'labels': 'labels',
        'source_labels': 'sourceLabels',
        'destination_labels': 'destinationLabels',
        'directionality': 'directionality',
        'max_value': 'maxValue',
        'points': 'points'
    }

    def __init__(self, labels=None, source_labels=None, destination_labels=None, directionality=None, max_value=None, points=None):  # noqa: E501
        """TimeSeriesResponseTimeSeries - a model defined in Swagger"""  # noqa: E501

        self._labels = None
        self._source_labels = None
        self._destination_labels = None
        self._directionality = None
        self._max_value = None
        self._points = None
        self.discriminator = None

        if labels is not None:
            self.labels = labels
        if source_labels is not None:
            self.source_labels = source_labels
        if destination_labels is not None:
            self.destination_labels = destination_labels
        if directionality is not None:
            self.directionality = directionality
        if max_value is not None:
            self.max_value = max_value
        if points is not None:
            self.points = points

    @property
    def labels(self):
        """Gets the labels of this TimeSeriesResponseTimeSeries.  # noqa: E501

        This is the response in v1 queries. Deprecated in v2.  # noqa: E501

        :return: The labels of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :rtype: list[GrpcLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TimeSeriesResponseTimeSeries.

        This is the response in v1 queries. Deprecated in v2.  # noqa: E501

        :param labels: The labels of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :type: list[GrpcLabel]
        """

        self._labels = labels

    @property
    def source_labels(self):
        """Gets the source_labels of this TimeSeriesResponseTimeSeries.  # noqa: E501

        v2 response returns the source, destination, and edge labels specified by the *_grouping fields in the request. If a requested label is not presesent it will be populated with an empty string.  # noqa: E501

        :return: The source_labels of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :rtype: list[GrpcLabel]
        """
        return self._source_labels

    @source_labels.setter
    def source_labels(self, source_labels):
        """Sets the source_labels of this TimeSeriesResponseTimeSeries.

        v2 response returns the source, destination, and edge labels specified by the *_grouping fields in the request. If a requested label is not presesent it will be populated with an empty string.  # noqa: E501

        :param source_labels: The source_labels of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :type: list[GrpcLabel]
        """

        self._source_labels = source_labels

    @property
    def destination_labels(self):
        """Gets the destination_labels of this TimeSeriesResponseTimeSeries.  # noqa: E501


        :return: The destination_labels of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :rtype: list[GrpcLabel]
        """
        return self._destination_labels

    @destination_labels.setter
    def destination_labels(self, destination_labels):
        """Sets the destination_labels of this TimeSeriesResponseTimeSeries.


        :param destination_labels: The destination_labels of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :type: list[GrpcLabel]
        """

        self._destination_labels = destination_labels

    @property
    def directionality(self):
        """Gets the directionality of this TimeSeriesResponseTimeSeries.  # noqa: E501

        v2 also returns whether the timeseries is FORWARD or REVERSED. These series are returned based on the query's request of FORWARD, REVERSED, or BOTH. in the response, `source_labels` will contain the request's `source_grouping`, and `destination_labels` will contain the request's `destination_grouping`. This holds to true even if direction = REVERSED; the idea is both directions would have the same schema so could be displayed in one table.  # noqa: E501

        :return: The directionality of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :rtype: GrpcDirectionality
        """
        return self._directionality

    @directionality.setter
    def directionality(self, directionality):
        """Sets the directionality of this TimeSeriesResponseTimeSeries.

        v2 also returns whether the timeseries is FORWARD or REVERSED. These series are returned based on the query's request of FORWARD, REVERSED, or BOTH. in the response, `source_labels` will contain the request's `source_grouping`, and `destination_labels` will contain the request's `destination_grouping`. This holds to true even if direction = REVERSED; the idea is both directions would have the same schema so could be displayed in one table.  # noqa: E501

        :param directionality: The directionality of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :type: GrpcDirectionality
        """

        self._directionality = directionality

    @property
    def max_value(self):
        """Gets the max_value of this TimeSeriesResponseTimeSeries.  # noqa: E501


        :return: The max_value of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this TimeSeriesResponseTimeSeries.


        :param max_value: The max_value of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def points(self):
        """Gets the points of this TimeSeriesResponseTimeSeries.  # noqa: E501


        :return: The points of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :rtype: GrpcPoint
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this TimeSeriesResponseTimeSeries.


        :param points: The points of this TimeSeriesResponseTimeSeries.  # noqa: E501
        :type: GrpcPoint
        """

        self._points = points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSeriesResponseTimeSeries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesResponseTimeSeries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
