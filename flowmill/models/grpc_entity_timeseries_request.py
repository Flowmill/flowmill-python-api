# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcEntityTimeseriesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end': 'datetime',
        'duration': 'str',
        'num_steps': 'int',
        'metric': 'list[str]',
        'grouping': 'list[str]',
        'filters': 'list[GrpcFilter]',
        'top_k': 'int',
        'no_rollups': 'bool'
    }

    attribute_map = {
        'end': 'end',
        'duration': 'duration',
        'num_steps': 'numSteps',
        'metric': 'metric',
        'grouping': 'grouping',
        'filters': 'filters',
        'top_k': 'topK',
        'no_rollups': 'noRollups'
    }

    def __init__(self, end=None, duration=None, num_steps=None, metric=None, grouping=None, filters=None, top_k=None, no_rollups=None):  # noqa: E501
        """GrpcEntityTimeseriesRequest - a model defined in Swagger"""  # noqa: E501

        self._end = None
        self._duration = None
        self._num_steps = None
        self._metric = None
        self._grouping = None
        self._filters = None
        self._top_k = None
        self._no_rollups = None
        self.discriminator = None

        if end is not None:
            self.end = end
        if duration is not None:
            self.duration = duration
        if num_steps is not None:
            self.num_steps = num_steps
        if metric is not None:
            self.metric = metric
        if grouping is not None:
            self.grouping = grouping
        if filters is not None:
            self.filters = filters
        if top_k is not None:
            self.top_k = top_k
        if no_rollups is not None:
            self.no_rollups = no_rollups

    @property
    def end(self):
        """Gets the end of this GrpcEntityTimeseriesRequest.  # noqa: E501

        See GetTimeSeriesRequestV2 for a description of constraints on time ranges.  Note: queries in this form implicitly define:    step_size = duration / num_steps We must place a meaningful restriction on step_size and reject queries that violate those restrictions.  # noqa: E501

        :return: The end of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this GrpcEntityTimeseriesRequest.

        See GetTimeSeriesRequestV2 for a description of constraints on time ranges.  Note: queries in this form implicitly define:    step_size = duration / num_steps We must place a meaningful restriction on step_size and reject queries that violate those restrictions.  # noqa: E501

        :param end: The end of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def duration(self):
        """Gets the duration of this GrpcEntityTimeseriesRequest.  # noqa: E501


        :return: The duration of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GrpcEntityTimeseriesRequest.


        :param duration: The duration of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def num_steps(self):
        """Gets the num_steps of this GrpcEntityTimeseriesRequest.  # noqa: E501


        :return: The num_steps of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_steps

    @num_steps.setter
    def num_steps(self, num_steps):
        """Sets the num_steps of this GrpcEntityTimeseriesRequest.


        :param num_steps: The num_steps of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :type: int
        """

        self._num_steps = num_steps

    @property
    def metric(self):
        """Gets the metric of this GrpcEntityTimeseriesRequest.  # noqa: E501

        Requested metrics to be returned.  If any of the specified metrics are not recognized, then we consider the query invalid and return a list of supported metrics.  Note: we need to define metrics such that they: 1) have human readable names; and 2) hide unnecessary complexity from the API consumer.  For example, we should expose a metric with a name like `cpu_usage` instead of `utime_ns` and `stime_ns`. See, for example, the graphs here: https://grafana.monitoring.flowmill.io/d/RlaZgKRMz/pipeline-generated-data?orgId=1&from=now-15m&to=now&var-env=All&var-az=All&var-role=All&var-host=ip-172-31-81-129.ec2.internal&var-comm=All&fullscreen&edit&panelId=14  # noqa: E501

        :return: The metric of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this GrpcEntityTimeseriesRequest.

        Requested metrics to be returned.  If any of the specified metrics are not recognized, then we consider the query invalid and return a list of supported metrics.  Note: we need to define metrics such that they: 1) have human readable names; and 2) hide unnecessary complexity from the API consumer.  For example, we should expose a metric with a name like `cpu_usage` instead of `utime_ns` and `stime_ns`. See, for example, the graphs here: https://grafana.monitoring.flowmill.io/d/RlaZgKRMz/pipeline-generated-data?orgId=1&from=now-15m&to=now&var-env=All&var-az=All&var-role=All&var-host=ip-172-31-81-129.ec2.internal&var-comm=All&fullscreen&edit&panelId=14  # noqa: E501

        :param metric: The metric of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :type: list[str]
        """

        self._metric = metric

    @property
    def grouping(self):
        """Gets the grouping of this GrpcEntityTimeseriesRequest.  # noqa: E501

        List of groupings applied to the entity timeseries.  Queries that fail to specify at least one grouping are considered invalid.  If a grouping is specified for a label that is not meaningful for entity metrics (or not supported at all), then we consider the query invalid and return a list of groupings that can be supported.  # noqa: E501

        :return: The grouping of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this GrpcEntityTimeseriesRequest.

        List of groupings applied to the entity timeseries.  Queries that fail to specify at least one grouping are considered invalid.  If a grouping is specified for a label that is not meaningful for entity metrics (or not supported at all), then we consider the query invalid and return a list of groupings that can be supported.  # noqa: E501

        :param grouping: The grouping of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :type: list[str]
        """

        self._grouping = grouping

    @property
    def filters(self):
        """Gets the filters of this GrpcEntityTimeseriesRequest.  # noqa: E501

        Lists of filters for the entity timeseries.  If a filter is specified on a label that is not meaningful for entity metrics, then we consider the query invalid and return a list of labels that we can use in filters. For example: `port` is not meaningful in the context of entity timeseries.  # noqa: E501

        :return: The filters of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :rtype: list[GrpcFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this GrpcEntityTimeseriesRequest.

        Lists of filters for the entity timeseries.  If a filter is specified on a label that is not meaningful for entity metrics, then we consider the query invalid and return a list of labels that we can use in filters. For example: `port` is not meaningful in the context of entity timeseries.  # noqa: E501

        :param filters: The filters of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :type: list[GrpcFilter]
        """

        self._filters = filters

    @property
    def top_k(self):
        """Gets the top_k of this GrpcEntityTimeseriesRequest.  # noqa: E501

        Maximum number of time series to return. Defaults to 30 if unspecified. If set to -1, then we'll return all timeseries.  Note: we'll need to define the meaning of `top_k` when multiple metrics are requested. We could either: 1) enforce the top_k on each metric individually (this is annoying for the    consumer though) 2) enforce the top_k on the *first* metric specified, and then filter    other metrics s.t. they include the entities of the first metric. 3) require the client to specify a 'sort-by' field when using the top_k    field.  There are use cases for all three of these behaviors. We should pick something that behaves well in a default case, but allows us to customize the behavior as needed.  # noqa: E501

        :return: The top_k of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :rtype: int
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this GrpcEntityTimeseriesRequest.

        Maximum number of time series to return. Defaults to 30 if unspecified. If set to -1, then we'll return all timeseries.  Note: we'll need to define the meaning of `top_k` when multiple metrics are requested. We could either: 1) enforce the top_k on each metric individually (this is annoying for the    consumer though) 2) enforce the top_k on the *first* metric specified, and then filter    other metrics s.t. they include the entities of the first metric. 3) require the client to specify a 'sort-by' field when using the top_k    field.  There are use cases for all three of these behaviors. We should pick something that behaves well in a default case, but allows us to customize the behavior as needed.  # noqa: E501

        :param top_k: The top_k of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :type: int
        """

        self._top_k = top_k

    @property
    def no_rollups(self):
        """Gets the no_rollups of this GrpcEntityTimeseriesRequest.  # noqa: E501

        If true, the service will disable use of rolled-up timeseries in the request. The rollups are currently 30 seconds. I.e., each timeseries is stored as a 30 second aggregate in the timeseries database. Rollups can significantly speed up large queries due to less points needed to cover the interval.  # noqa: E501

        :return: The no_rollups of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._no_rollups

    @no_rollups.setter
    def no_rollups(self, no_rollups):
        """Sets the no_rollups of this GrpcEntityTimeseriesRequest.

        If true, the service will disable use of rolled-up timeseries in the request. The rollups are currently 30 seconds. I.e., each timeseries is stored as a 30 second aggregate in the timeseries database. Rollups can significantly speed up large queries due to less points needed to cover the interval.  # noqa: E501

        :param no_rollups: The no_rollups of this GrpcEntityTimeseriesRequest.  # noqa: E501
        :type: bool
        """

        self._no_rollups = no_rollups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcEntityTimeseriesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcEntityTimeseriesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
