# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MonitorCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scalar': 'GrpcScalarSeriesPredicate',
        'iqr': 'GrpcIqrSeriesPredicate',
        'fraction': 'GrpcFractionalCoveragePredicate',
        'op': 'ConditionOp',
        'duration': 'str'
    }

    attribute_map = {
        'scalar': 'scalar',
        'iqr': 'iqr',
        'fraction': 'fraction',
        'op': 'op',
        'duration': 'duration'
    }

    def __init__(self, scalar=None, iqr=None, fraction=None, op=None, duration=None):  # noqa: E501
        """MonitorCondition - a model defined in Swagger"""  # noqa: E501

        self._scalar = None
        self._iqr = None
        self._fraction = None
        self._op = None
        self._duration = None
        self.discriminator = None

        if scalar is not None:
            self.scalar = scalar
        if iqr is not None:
            self.iqr = iqr
        if fraction is not None:
            self.fraction = fraction
        if op is not None:
            self.op = op
        if duration is not None:
            self.duration = duration

    @property
    def scalar(self):
        """Gets the scalar of this MonitorCondition.  # noqa: E501


        :return: The scalar of this MonitorCondition.  # noqa: E501
        :rtype: GrpcScalarSeriesPredicate
        """
        return self._scalar

    @scalar.setter
    def scalar(self, scalar):
        """Sets the scalar of this MonitorCondition.


        :param scalar: The scalar of this MonitorCondition.  # noqa: E501
        :type: GrpcScalarSeriesPredicate
        """

        self._scalar = scalar

    @property
    def iqr(self):
        """Gets the iqr of this MonitorCondition.  # noqa: E501


        :return: The iqr of this MonitorCondition.  # noqa: E501
        :rtype: GrpcIqrSeriesPredicate
        """
        return self._iqr

    @iqr.setter
    def iqr(self, iqr):
        """Sets the iqr of this MonitorCondition.


        :param iqr: The iqr of this MonitorCondition.  # noqa: E501
        :type: GrpcIqrSeriesPredicate
        """

        self._iqr = iqr

    @property
    def fraction(self):
        """Gets the fraction of this MonitorCondition.  # noqa: E501


        :return: The fraction of this MonitorCondition.  # noqa: E501
        :rtype: GrpcFractionalCoveragePredicate
        """
        return self._fraction

    @fraction.setter
    def fraction(self, fraction):
        """Sets the fraction of this MonitorCondition.


        :param fraction: The fraction of this MonitorCondition.  # noqa: E501
        :type: GrpcFractionalCoveragePredicate
        """

        self._fraction = fraction

    @property
    def op(self):
        """Gets the op of this MonitorCondition.  # noqa: E501


        :return: The op of this MonitorCondition.  # noqa: E501
        :rtype: ConditionOp
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this MonitorCondition.


        :param op: The op of this MonitorCondition.  # noqa: E501
        :type: ConditionOp
        """

        self._op = op

    @property
    def duration(self):
        """Gets the duration of this MonitorCondition.  # noqa: E501


        :return: The duration of this MonitorCondition.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MonitorCondition.


        :param duration: The duration of this MonitorCondition.  # noqa: E501
        :type: str
        """

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitorCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitorCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
