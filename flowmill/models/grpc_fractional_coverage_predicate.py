# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GrpcFractionalCoveragePredicate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metric': 'str',
        'window': 'GrpcDataWindow',
        'label_equality_pairs': 'list[GrpcLabelEqualityPair]',
        'value_comparator': 'GrpcComparatorType',
        'value': 'float',
        'threshold_comparator': 'GrpcComparatorType',
        'thresholds': 'list[GrpcFractionalCoveragePredicateThreshold]'
    }

    attribute_map = {
        'metric': 'metric',
        'window': 'window',
        'label_equality_pairs': 'labelEqualityPairs',
        'value_comparator': 'valueComparator',
        'value': 'value',
        'threshold_comparator': 'thresholdComparator',
        'thresholds': 'thresholds'
    }

    def __init__(self, metric=None, window=None, label_equality_pairs=None, value_comparator=None, value=None, threshold_comparator=None, thresholds=None):  # noqa: E501
        """GrpcFractionalCoveragePredicate - a model defined in Swagger"""  # noqa: E501

        self._metric = None
        self._window = None
        self._label_equality_pairs = None
        self._value_comparator = None
        self._value = None
        self._threshold_comparator = None
        self._thresholds = None
        self.discriminator = None

        if metric is not None:
            self.metric = metric
        if window is not None:
            self.window = window
        if label_equality_pairs is not None:
            self.label_equality_pairs = label_equality_pairs
        if value_comparator is not None:
            self.value_comparator = value_comparator
        if value is not None:
            self.value = value
        if threshold_comparator is not None:
            self.threshold_comparator = threshold_comparator
        if thresholds is not None:
            self.thresholds = thresholds

    @property
    def metric(self):
        """Gets the metric of this GrpcFractionalCoveragePredicate.  # noqa: E501


        :return: The metric of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this GrpcFractionalCoveragePredicate.


        :param metric: The metric of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def window(self):
        """Gets the window of this GrpcFractionalCoveragePredicate.  # noqa: E501


        :return: The window of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :rtype: GrpcDataWindow
        """
        return self._window

    @window.setter
    def window(self, window):
        """Sets the window of this GrpcFractionalCoveragePredicate.


        :param window: The window of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :type: GrpcDataWindow
        """

        self._window = window

    @property
    def label_equality_pairs(self):
        """Gets the label_equality_pairs of this GrpcFractionalCoveragePredicate.  # noqa: E501


        :return: The label_equality_pairs of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :rtype: list[GrpcLabelEqualityPair]
        """
        return self._label_equality_pairs

    @label_equality_pairs.setter
    def label_equality_pairs(self, label_equality_pairs):
        """Sets the label_equality_pairs of this GrpcFractionalCoveragePredicate.


        :param label_equality_pairs: The label_equality_pairs of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :type: list[GrpcLabelEqualityPair]
        """

        self._label_equality_pairs = label_equality_pairs

    @property
    def value_comparator(self):
        """Gets the value_comparator of this GrpcFractionalCoveragePredicate.  # noqa: E501

        The criteria for evaluating whether any point in the time series should be counted in the numerator of the computed fraction. The time series value will be the first operand and `value` will be the second.  # noqa: E501

        :return: The value_comparator of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :rtype: GrpcComparatorType
        """
        return self._value_comparator

    @value_comparator.setter
    def value_comparator(self, value_comparator):
        """Sets the value_comparator of this GrpcFractionalCoveragePredicate.

        The criteria for evaluating whether any point in the time series should be counted in the numerator of the computed fraction. The time series value will be the first operand and `value` will be the second.  # noqa: E501

        :param value_comparator: The value_comparator of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :type: GrpcComparatorType
        """

        self._value_comparator = value_comparator

    @property
    def value(self):
        """Gets the value of this GrpcFractionalCoveragePredicate.  # noqa: E501


        :return: The value of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GrpcFractionalCoveragePredicate.


        :param value: The value of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def threshold_comparator(self):
        """Gets the threshold_comparator of this GrpcFractionalCoveragePredicate.  # noqa: E501

        How the threshold will be compared against the fraction of values meeting the above criteria. Computed fraction is first operand, `Threshold.second` is second.  # noqa: E501

        :return: The threshold_comparator of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :rtype: GrpcComparatorType
        """
        return self._threshold_comparator

    @threshold_comparator.setter
    def threshold_comparator(self, threshold_comparator):
        """Sets the threshold_comparator of this GrpcFractionalCoveragePredicate.

        How the threshold will be compared against the fraction of values meeting the above criteria. Computed fraction is first operand, `Threshold.second` is second.  # noqa: E501

        :param threshold_comparator: The threshold_comparator of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :type: GrpcComparatorType
        """

        self._threshold_comparator = threshold_comparator

    @property
    def thresholds(self):
        """Gets the thresholds of this GrpcFractionalCoveragePredicate.  # noqa: E501


        :return: The thresholds of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :rtype: list[GrpcFractionalCoveragePredicateThreshold]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this GrpcFractionalCoveragePredicate.


        :param thresholds: The thresholds of this GrpcFractionalCoveragePredicate.  # noqa: E501
        :type: list[GrpcFractionalCoveragePredicateThreshold]
        """

        self._thresholds = thresholds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrpcFractionalCoveragePredicate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrpcFractionalCoveragePredicate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
