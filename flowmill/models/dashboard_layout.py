# coding: utf-8

"""
    Flowmill API Specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DashboardLayout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'w': 'int',
        'h': 'int',
        'x': 'int',
        'y': 'int',
        'i': 'str',
        'min_w': 'int',
        'min_h': 'int',
        'moved': 'bool',
        'static': 'bool'
    }

    attribute_map = {
        'w': 'w',
        'h': 'h',
        'x': 'x',
        'y': 'y',
        'i': 'i',
        'min_w': 'minW',
        'min_h': 'minH',
        'moved': 'moved',
        'static': 'static'
    }

    def __init__(self, w=None, h=None, x=None, y=None, i=None, min_w=None, min_h=None, moved=None, static=None):  # noqa: E501
        """DashboardLayout - a model defined in Swagger"""  # noqa: E501

        self._w = None
        self._h = None
        self._x = None
        self._y = None
        self._i = None
        self._min_w = None
        self._min_h = None
        self._moved = None
        self._static = None
        self.discriminator = None

        if w is not None:
            self.w = w
        if h is not None:
            self.h = h
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if i is not None:
            self.i = i
        if min_w is not None:
            self.min_w = min_w
        if min_h is not None:
            self.min_h = min_h
        if moved is not None:
            self.moved = moved
        if static is not None:
            self.static = static

    @property
    def w(self):
        """Gets the w of this DashboardLayout.  # noqa: E501


        :return: The w of this DashboardLayout.  # noqa: E501
        :rtype: int
        """
        return self._w

    @w.setter
    def w(self, w):
        """Sets the w of this DashboardLayout.


        :param w: The w of this DashboardLayout.  # noqa: E501
        :type: int
        """

        self._w = w

    @property
    def h(self):
        """Gets the h of this DashboardLayout.  # noqa: E501


        :return: The h of this DashboardLayout.  # noqa: E501
        :rtype: int
        """
        return self._h

    @h.setter
    def h(self, h):
        """Sets the h of this DashboardLayout.


        :param h: The h of this DashboardLayout.  # noqa: E501
        :type: int
        """

        self._h = h

    @property
    def x(self):
        """Gets the x of this DashboardLayout.  # noqa: E501


        :return: The x of this DashboardLayout.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this DashboardLayout.


        :param x: The x of this DashboardLayout.  # noqa: E501
        :type: int
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this DashboardLayout.  # noqa: E501


        :return: The y of this DashboardLayout.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this DashboardLayout.


        :param y: The y of this DashboardLayout.  # noqa: E501
        :type: int
        """

        self._y = y

    @property
    def i(self):
        """Gets the i of this DashboardLayout.  # noqa: E501

        The id of associated section/component. This field is generated and handled by frontend, NOT backend.  # noqa: E501

        :return: The i of this DashboardLayout.  # noqa: E501
        :rtype: str
        """
        return self._i

    @i.setter
    def i(self, i):
        """Sets the i of this DashboardLayout.

        The id of associated section/component. This field is generated and handled by frontend, NOT backend.  # noqa: E501

        :param i: The i of this DashboardLayout.  # noqa: E501
        :type: str
        """

        self._i = i

    @property
    def min_w(self):
        """Gets the min_w of this DashboardLayout.  # noqa: E501


        :return: The min_w of this DashboardLayout.  # noqa: E501
        :rtype: int
        """
        return self._min_w

    @min_w.setter
    def min_w(self, min_w):
        """Sets the min_w of this DashboardLayout.


        :param min_w: The min_w of this DashboardLayout.  # noqa: E501
        :type: int
        """

        self._min_w = min_w

    @property
    def min_h(self):
        """Gets the min_h of this DashboardLayout.  # noqa: E501


        :return: The min_h of this DashboardLayout.  # noqa: E501
        :rtype: int
        """
        return self._min_h

    @min_h.setter
    def min_h(self, min_h):
        """Sets the min_h of this DashboardLayout.


        :param min_h: The min_h of this DashboardLayout.  # noqa: E501
        :type: int
        """

        self._min_h = min_h

    @property
    def moved(self):
        """Gets the moved of this DashboardLayout.  # noqa: E501


        :return: The moved of this DashboardLayout.  # noqa: E501
        :rtype: bool
        """
        return self._moved

    @moved.setter
    def moved(self, moved):
        """Sets the moved of this DashboardLayout.


        :param moved: The moved of this DashboardLayout.  # noqa: E501
        :type: bool
        """

        self._moved = moved

    @property
    def static(self):
        """Gets the static of this DashboardLayout.  # noqa: E501


        :return: The static of this DashboardLayout.  # noqa: E501
        :rtype: bool
        """
        return self._static

    @static.setter
    def static(self, static):
        """Sets the static of this DashboardLayout.


        :param static: The static of this DashboardLayout.  # noqa: E501
        :type: bool
        """

        self._static = static

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardLayout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardLayout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
